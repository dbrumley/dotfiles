#+TITLE: David Brumley's Emacs Configuration
#+AUTHOR: David Brumley
#+OPTIONS: toc:4 h:4
#+PROPERTY: header-args :tangle yes

* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:

** Table of Contents :TOC_3_gh:

** About this file
This is an Emacs literate configuration template. It contains the
basic structure of a literate config along with some optimizations to
ensure a fast load time.

** Org File Tweaks
There are a few tweaks included in this org file that make it a little
easier to work with.

*** Automatically Tangle
First there is a property defined on the file:

#+BEGIN_SRC :tangle no
header-args :tangle yes
#+END_SRC

This tells emacs to automatically tangle (include) all code blocks in
this file when generating the code for the config, unless the code
block explicitly includes =:tangle no= as the above code block does.

*** Visibility Settings

Next we have a property defined on the [[Configuration][Configuration]] heading that
defines the visibility that tells org to show it's direct children on
startup. This way a clean outline of all sub headings under
Configuration is shown each time this file is opened in org-mode.

*** Table of Contents

Finally, there is a [[Table of Contents][Table of Contents]] heading that includes the tag:
=:TOC_3_gh:=. This tells an org-mode package =toc-org= to generate a
table of contents under this heading that has a max depth of 3 and is
created using Github-style hrefs. This table of contents is updated
everytime the file is saved and makes for a functional table of
contents that works property directly on github.

** Personal Information
Let's set some variables with basic user information.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "David Brumley"
      user-mail-address "dbrumley@forallsecure.com")
#+END_SRC

** Emacs Initialization
*** Settings
We're going to increase the gc-cons-threshold to a very high number to
decrease the load and compile time.  We'll lower this value
significantly after initialization has completed. We don't want to
keep this value too high or it will result in long GC pauses during
normal usage.

#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6))
#+END_SRC

Disable certain byte compiler warnings to cut down on the noise. This
is a personal choice and can be removed if you would like to see any
and all byte compiler warnings.

#+BEGIN_SRC emacs-lisp
  (setq byte-compile-warnings '(not free-vars unresolved noruntime
  lexical make-local))
#+END_SRC

*** Package Management

**** Package Settings

We're going to set the =load-path= ourselves and avoid calling
=(package-initilize)= (for performance reasons) so we need to set
=package--init-file-ensured= to true to tell =package.el= to not
automatically call it on our behalf. Additionally we're setting
=package-enable-at-startup= to nil so that packages will not
automatically be loaded for us since =use-package= will be handling
that.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-prefer-newer t
          package-user-dir "~/.emacs.d/elpa"
          package--init-file-ensured t
          package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t)))
#+END_SRC

**** Use-Package Settings
Tell =use-package= to always defer loading packages unless explicitly
told otherwise. This speeds up initialization significantly as many
packages are only loaded later when they are explicitly used.

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-defer t
        use-package-verbose t)
#+END_SRC

**** Manually Set Load Path
We're going to set the load path ourselves so that we don't have to
call =package-initialize= at runtime and incur a large performance
hit. This load-path will actually be faster than the one created by
=package-initialize= because it appends the elpa packages to the end
of the load path.  Otherwise any time a builtin package was required
it would have to search all of third party paths first.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+END_SRC

**** Initialize Package Management
Next we are going to require =package.el= and add our additional
package archives, 'melpa' and 'org'.  Afterwards we need to initialize
our packages and then ensure that =use-package= is installed, which we
promptly install if it's missing. Finally we load =use-package= and
tell it to always install any missing packages.

Note that this entire block is wrapped in =eval-when-compile=. The
effect of this is to perform all of the package initialization during
compilation so that when byte compiled, all of this time consuming
code is skipped. This can be done because the result of byte compiling
=use-package= statements results in the macro being fully expanded at
which point =use-package= isn't actually required any longer.

Since the code is automatically compiled during runtime, if the configuration hasn't already been
previously compiled manually then all of the package initialization will still take place at startup.

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'package)

    (unless (assoc-default "melpa" package-archives)
      (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t))
    (unless (assoc-default "org" package-archives)
      (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t))

    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t))
#+END_SRC

** Color Theme
#+BEGIN_SRC emacs-lisp
(deftheme default-black
  "Automatically created 2013-05-20.")


(custom-theme-set-faces
 'default-black
 '(default ((t (:inherit nil :stipple nil :background "Black" :foreground "White" :inverse-video nil :box nil :strike-t*hrough nil :overline nil :underline nil :slant normal :weight normal :width normal :height 105))))
 '(highlight ((((class color) (min-colors 88) (background dark)) (:background "#111111"))))
 '(region ((nil (:background "#464740"))))
 '(hl-line ((nil (:background "#222222"))))
 '(yas-field-highlight-face ((nil (:background "#333399"))))
 '(js2-function-param-face ((t (:foreground "LightGoldenrod"))))
 '(font-lock-warning-face ((nil (:foreground "#ff6666"))))
 '(show-paren-match ((nil (:background "#333399"))))
 '(show-paren-mismatch ((((class color)) (:background "red")))))

(provide-theme 'default-black)

#+END_SRC

** Initial Preferences
*** bind =dbrumley.org= =d= register
I bind a register key to =dbrumley.org= because I find myself editing
it often.  I put this at the top because I want it available even if
something else doesn't load.

Reminder: to access this press =C-x r j= and press =d= at the
prompt. I initially found this hard to remember until I figured out:
  * =C-x= means execute in emacs
  * =r= is register
  * =j= is jump
So overall I think of this as "execute the command register jump",
which is very logical if you think about it.

#+BEGIN_SRC emacs-lisp
  (set-register ?d (cons 'file "~/.emacs.d/dbrumley.org"))
  (set-register ?t (cons 'file "~/Dropbox/org-mode/todo.org"))
#+END_SRC

*** Turn off splash screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
#+END_SRC

*** Highlight matching parentheses
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

*** Turn off tabs
#+BEGIN_SRC emacs-lisp
  (set-default 'indent-tabs-mode nil)
#+END_SRC

*** Indicate empty lines
#+BEGIN_SRC emacs-lisp
  (set-default 'indicate-empty-lines t)
#+END_SRC

*** Turn on auto-fill for text mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

*** Turn off backup files
#+BEGIN_SRC emacs-lisp
  (set-default 'make-backup-files nil)
#+END_SRC

*** Change "yes or no" to "y or n"
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Turn off toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
*** Put time in status bar
#+BEGIN_SRC emacs-lisp
  (setq display-time-day-and-date t display-time-24hr-format t)
               (display-time)
#+END_SRC
*** Delete trailing white space

To remove trailing white space, Emacs v21 and greater has =M-x
delete-training-whitespace=. This runs the command as part of the
=before-save-hook=.
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Optionally, this could be done only in particular modes, e.g.,
#+BEGIN_EXAMPLE emacs-lisp
(add-hook 'c-mode-hook
(lambda () (add-to-list 'write-file-functions
                        'delete-trailing-whitespace)))
#+END_EXAMPLE

** Packages
*** Counsel
Counsel allows us to utilize ivy by replacing many built-in and common functions
with richer versions. Let's install it!

#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile)
(use-package counsel
  :demand t)
#+END_SRC

*** Swiper
Swiper is an awesome searching utility with a quick preview. Let's install it and
load it when =swiper= or =swiper-all= is called.

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :commands (swiper swiper-all))
#+END_SRC

*** Magit
The magical git client. Let's load magit only when one of the several entry pont
functions we invoke regularly outside of magit is called.

#+BEGIN_SRC emacs-lisp
(use-package magit
 :ensure t
  :commands (magit-status magit-blame magit-log-buffer-file magit-log-all)
  :bind (("C-x v d" . magit-status))
)
#+END_SRC

*** Projectile
Projectile is a quick and easy project management package that "just works". We're
going to install it and make sure it's loaded immediately.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :demand t)
#+END_SRC

*** Org
Let's include a newer version of org-mode than the one that is built in. We're going
to manually remove the org directories from the load path, to ensure the version we
want is prioritized instead.

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :pin org
  :defer t)

;; Ensure ELPA org is prioritized above built-in org.
(require 'cl)
(setq load-path (remove-if (lambda (x) (string-match-p "org$" x)) load-path))

;; Make sure org knows about the languages we use
(org-babel-do-load-languages
 'org-babel-load-languages
   '((python . t)
     (emacs-lisp . t)
     (ocaml . t)
     (python . t)
     (shell . t)
     (C . t)
    )
)

;; Fontify within SRC blocks natively
(setq org-src-fontify-natively t)
#+END_SRC

*** Toc-org
Let's install and load the =toc-org= package after org mode is
loaded. This is the package that automatically generates an up to date
table of contents for us.

#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :after org
  :init (add-hook 'org-mode-hook #'toc-org-enable))
#+END_SRC

*** YAML and Markdown
I use two markdown modules current: markdown-mode for editing, and the
github markdown API for rendering via gh-md

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
)
(use-package gh-md
  :ensure t
)
#+END_SRC

*** Company mode
I use [[http://company-mode.github.io/][company mode]] for auto-completion.  Funny story: I thought
company mode was some sort of corporate mode. It actually stands for
"complete anything".  Note this is use by elpy for python, but I have
it here since it works with most languages.  I also enable it globally
via the config hook.

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
   (add-hook 'after-init-hook 'global-company-mode)
)
(use-package company-quickhelp
  :ensure t
)
#+END_SRC

*** Discover My Major Mode
In any mode =C-h C-m= will show a list of key bindings.
#+BEGIN_SRC emacs-lisp
(use-package discover-my-major
  :ensure t
)
(global-set-key (kbd "C-h C-m") 'discover-my-major)
#+END_SRC

*** Define Word at Point
Define word at point will define a word...at the current point.

#+BEGIN_SRC emacs-lisp
(use-package define-word
  :ensure t
  :config
  (progn
    (global-set-key (kbd "C-c d") 'define-word-at-point)
    (global-set-key (kbd "C-c D") 'define-word)
  )
)
#+END_SRC

*** OCaml
Everything OCaml related is done out of opam, not the default emacs
package sites. This was taken from the opam =user-setup= package and
Ivan's configuration.

Note that to use a dynamically generated load path, we must inform the
byte-compiler of the definition so that the value is available. See
the [[https://github.com/jwiegley/use-package][use-package]] documentation.

We use =opam-user-setup=
#+BEGIN_SRC emacs-lisp
(require 'opam-user-setup "~/.emacs.d/opam-user-setup.el")
(defun opam-lib-path (path)
    (let ((opam-share-dir
           (shell-command-to-string "echo -n `opam config var lib`")))
      (concat opam-share-dir "/" path)
    )
 )
(defun opam-share-path (path)
(let ((opam-share-dir
      (shell-command-to-string "echo -n `opam config var share`")))
      (concat opam-share-dir "/" path)
)
)
#+END_SRC

First, load up ocp-indent, as we should never be manually indenting.
#+BEGIN_SRC emacs-lisp
  (use-package ocp-indent
    :load-path (lambda () (list (opam-share-path "emacs/site-lisp")))
  )
#+END_SRC

Second, load up merlin.  We set some preferences:
  * =tuareg-font-lock-symbols= gives us the fancy typeface where
    functions have the lambda character, etc.
  * =merlin-use-auto-complete-mode= makes auto-complete easy.
  * =merlin-locate-preference= is set to prefer the mli file over the
    ml file.
  * We enable using company as a backend for autocomplete. This should
    have already been enabled globally, but why not have it here too
    just to make sure.

Note that on some systems =tuareg-font-lock-symbols= causes huge
performance issues; if this happens just comment it out.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package ocp-indent)
(use-package merlin
    :load-path (lambda () (list (opam-share-path "emacs/site-lisp")))
    :config
      (progn
        (load "tuareg-site-file")
        (setq tuareg-font-lock-symbols t)
        (setq merlin-use-auto-complete-mode 'easy)
        (setq merlin-locate-preference 'mli)
        ; Make company aware of merlin
        (add-to-list 'company-backends 'merlin-company-backend)
        ; Enable company on merlin managed buffers
        (add-hook 'merlin-mode-hook 'company-mode)
        ; use tuareg for atdgen files
        (add-to-list 'auto-mode-alist '("\\.atd\\'" . tuareg-mode))
        ; Turn on merlin for ocaml
        (add-hook 'tuareg-mode-hook
          (lambda ()
            (merlin-mode)
            (local-set-key (kbd "C-c c") 'recompile)
            (local-set-key (kbd "C-c C-c") 'recompile)
            ; workaround for https://github.com/ocaml/tuareg/issues/45
            (tuareg-make-indentation-regexps)
            (auto-fill-mode))
            )

       )
  )
#+END_SRC

We also need to configure =utop=:
#+BEGIN_SRC emacs-lisp
;; Automatically load utop.el
(autoload 'utop "utop" "Toplevel for OCaml" t)
#+END_SRC

*** Latex/Docview setup
**** Install packages

   One thing that took me awhile to figure out is that the package auctex
is not called auctex.  [[http://superuser.com/questions/737835/cannot-run-auctex-on-emacs][One post]] suggests to require =tex=, while the
=use-package= documents suggest =tex-site=.  I do the latter, and it
seems to work.

#+BEGIN_SRC emacs-lisp
  (use-package tex-site
    :ensure auctex
  )
  (use-package auctex-latexmk
    :ensure t
  )
  (use-package latex-preview-pane
    :ensure t
  )
#+END_SRC

**** Setup auctex basics
#+BEGIN_SRC emacs-lisp

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;; LATEXMK and AUCTEX ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; http://tex.stackexchange.com/a/156617/26911

  ;; Sample `latexmkrc` for OSX that copies the *.pdf file from the `/tmp` directory
  ;; to the working directory:
  ;;    $pdflatex = 'pdflatex -file-line-error -synctex=1 %O %S && (cp "%D" "%R.pdf")';
  ;;    $pdf_mode = 1;
  ;;    $out_dir = '/tmp';"

  ;; Skim's displayline is used for forward search (from .tex to .pdf)
  ;; option -b highlights the current line
  ;; option -g opens Skim in the background
  ;; option -o open Skim in the foreground with full application focus.

  ;; Skim -- turn on auto-refresh by typing the following into the terminal:
  ;; defaults write -app Skim SKAutoReloadFileUpdate -boolean true

  ;; TexLive on OSX:
  ;; (setenv "PATH" (concat (getenv "PATH") ":/usr/texbin"))

  (eval-after-load "tex" '(progn

    (add-to-list 'TeX-expand-list '("%(tex-file-name)" (lambda ()
      (concat "\"" (buffer-file-name) "\""))))

    (add-to-list 'TeX-expand-list '("%(pdf-file-name)" (lambda ()
      (concat
        "\"" (car (split-string (buffer-file-name) "\\.tex"))
        ".pdf" "\""))))

    (add-to-list 'TeX-expand-list '("%(line-number)" (lambda ()
      (format "%d" (line-number-at-pos)))))

        (add-to-list 'TeX-expand-list '("%(latexmkrc-osx)" (lambda () "/Users/dbrumley/.latexmkrc")))

        (add-to-list 'TeX-command-list '("latexmk-osx" "latexmk -r %(latexmkrc-osx) %s" TeX-run-TeX nil t))

        (add-to-list 'TeX-expand-list '("%(skim)" (lambda () "/Applications/Skim.app/Contents/SharedSupport/displayline")))

        (add-to-list 'TeX-command-list '("Skim" "%(skim) -o %(line-number) %(pdf-file-name) %(tex-file-name)" TeX-run-TeX nil t))

        (add-to-list 'TeX-view-program-list '("skim-viewer" "%(skim) -o %(line-number) %(pdf-file-name) %(tex-file-name)"))

        (add-to-list 'TeX-command-list
                     '("doc-view" "(lambda ()
                 (let ((f \"%o\"))
                   (find-file-other-window f)
                   (doc-view-mode)))"
                       TeX-run-function nil t))


        (setq TeX-view-program-selection '((output-pdf "skim-viewer")))
        ))


  (defun auctex-latexmk ()
  "Compile, view *.pdf, and clean (maybe)."
  (interactive)
    (require 'tex)
    (require 'latex)
    (let* (
        (TeX-PDF-mode t)
        (TeX-source-correlate-mode t)
        (TeX-source-correlate-method 'synctex)
        (TeX-source-correlate-start-server nil)
        (TeX-clean-confirm t))
      (when (buffer-modified-p)
        (save-buffer))
      (set-process-sentinel
        (TeX-command "LaTeX" 'TeX-master-file)
          (lambda (p e)
            (when (not (= 0 (process-exit-status p)))
              (TeX-next-error t) )
            (when (= 0 (process-exit-status p))
              (delete-other-windows)
              (TeX-command "doc-view" 'TeX-active-master 0)
              ;; `set-process-sentinel` cannot be used on Windows XP for post-view cleanup,
              ;; because Emacs treats SumatraPDF as an active process until SumatraPDF exits.
              (let ((major-mode 'latex-mode))
                (TeX-command "Clean" 'TeX-master-file)))))))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

**** Turn on reftex and set default bibliography

#+BEGIN_SRC emacs-lisp
(add-hook 'latex-mode-hook 'turn-on-reftex)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-default-bibliography '("DBrumley.bib"))
#+END_SRC

**** handy in-emacs pdf navigation
In docview mode, creates key bindings so that =M-[= and =M-]= move forward
and backward while keeping your cursor within the buffer. useful for
reviewing papers so you can write notes as you read.  Taken from
[[http://www.idryman.org/blog/2013/05/20/emacs-and-pdf/]]

#+BEGIN_SRC emacs-lisp
(fset 'doc-prev "\C-xo\C-x[\C-xo")
(fset 'doc-next "\C-xo\C-x]\C-xo")
(global-set-key (kbd "M-[") 'doc-prev)
(global-set-key (kbd "M-]") 'doc-next)
#+END_SRC

*** Writegood
We want to be able to check for "weasel" words et al. This is a handy
package, and also referenced on [[http://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/][Matt Might]]'s blog. I enable this mode
by default for latex and for text files.

#+BEGIN_SRC emacs-lisp
(use-package writegood-mode
  :ensure t
  :config
  (progn
     (defun writegood-minor-mode-on ()
        "Turn on `writegood-mode` mode."
        (interactive)
        (writegood-mode 1))
     (add-hook 'text-mode-hook 'writegood-minor-mode-on)
     (add-hook 'latex-mode-hook 'writegood-minor-mode-on)
  )
)
#+END_SRC

*** Web
I get most of my web configuration, especially for react, from
[[http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html]]

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
 :ensure t
)
(use-package flycheck
 :ensure t)
(use-package json-mode
 :ensure t)
(use-package web-mode
  :ensure t)

;; use web-mode for .jsx files
(add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))

;; http://www.flycheck.org/manual/latest/index.html
(require 'flycheck)

;; turn on flychecking globally
(add-hook 'after-init-hook #'global-flycheck-mode)

;; disable jshint since we prefer eslint checking
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(javascript-jshint)))

;; use eslint with web-mode for jsx files
(flycheck-add-mode 'javascript-eslint 'web-mode)

;; customize flycheck temp file prefix
(setq-default flycheck-temp-prefix ".flycheck")

;; disable json-jsonlist checking for json files
(setq-default flycheck-disabled-checkers
  (append flycheck-disabled-checkers
    '(json-jsonlist)))

;; This is from the webpage, but done already.
;; https://github.com/purcell/exec-path-from-shell
;; only need exec-path-from-shell on OSX
;; this hopefully sets up path and other vars better
;(when (memq window-system '(mac ns))
;  (exec-path-from-shell-initialize))
#+END_SRC


*** Python
In Python, I use =elpy=, and so far am quite happy with it. I use it
with company-mode (completion-mode), =jedi= , and =ipython= for my
REPL.  I have everything set up for =python3=.

Note that the emacs utilities must work in concert with installed with
the installed python version, e.g., which =rope= (for autocompletion)
you install depends on whether you are running python 2 or 3.

**** OSX dependencies

Below I detail how I set things up using macports on my OSX macbook
pro (running El Capitan if that matters).  First install `python3` and
`pip3`.

#+BEGIN_SRC shell :tangle no
$ port search python3
#+END_SRC

In the following, I assume `python35` is the latest; substitute
whatever latest version you see from the above command.

You need to install `python35` and `py35-pip`:

#+BEGIN_SRC shell :tangle no
$ port install python35 py35-pip
#+END_SRC

In accordance with PEP standards, we refer to particular versions of
Python 3 as `python3`.  You need to configure your particular
installed version to be known as `python3`, which can be done as
follows:

#+BEGIN_SRC shell :tangle no
$ sudo port select python3 python35
#+END_SRC

Unfortunately, while it is common in Linux to refer to =pip= as the
python 2 version for, and =pip3= as the Python 3 version of pip,
macports doesn't quite adhere to this convention. I select to link
=pip= as the python 3 version:

#+BEGIN_SRC shell :tangle no
$ sudo port select pip pip35
#+END_SRC


Note: You can always run =port select python3= and =port select pip=
to see which versions of =pip= and =python= are available.

I also use =ipython= as my REPL.  To install =ipython= for =python3=,
run:
#+BEGIN_SRC shell :tangle no
sudo port install py35-ipython
#+END_SRC

Similar to =python3= and =pip=, you should use =port select= to
select the proper symbolic link for =ipython=:
#+BEGIN_SRC shell :tangle no
$ port select ipython
#+END_SRC

When everything is installed correctly you should be able to run =pip=
and =python3= and verify it's pointing to some variant of version 3.

#+BEGIN_SRC shell :tangle no
$ pip --version
pip 8.1.1 from /opt/local/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages (python 3.5)
$ python3 --version
Python 3.5.1
$ ipython --version
3.1.0
#+END_SRC


**** Emacs configuration
I install =elpy= via MELPA (set up above).

Before using =elpy=, install the =pip= dependencies for
  * =flake8= to check python code (a linter)
  * =rope=, a python refactoring library (the appropriate version for
    your python install)
  * =jedi=, a python autocompletion library
  * =yapf= to beautiful python files and buffers
  * =autopep8= to make sure code is PEP8 compliant
  * =importmagic= to automatically add, remove, and manage imports

On my system, I do:
#+BEGIN_SRC shell :tangle no
pip install rope_py3k
pip install flake8
pip install importmagic
pip install autopep8
pip install yapf
pip install jedi
#+END_SRC

Now, install and configure elpy. We set:
 * =ipython= as the python evaluation engine
 * Use company mode (completion mode) for quick help

#+BEGIN_SRC emacs-lisp :tangle no
(use-package company-quickhelp
  :ensure t
)

(use-package company-jedi
  :ensure t
)

(use-package elpy
  :ensure t
  :config
  (progn
    (elpy-enable)
    (company-quickhelp-mode)
    (elpy-use-ipython)
  )
)
(setq python-shell-interpreter "ipython"
    python-shell-interpreter-args "--simple-prompt -i")
#+END_SRC

Install the =pydoc= package for documentation
#+BEGIN_SRC emacs-lisp
(use-package pydoc
 :ensure t
)
#+END_SRC

*Non-pep compliant code:* Note that often I will want to edit a file
that doesn't conform to pep8.  To disable flycheck (which calls pep8
and flake8) you should uncomment the following lines.  I wish the code
I looked at was better and I didn't have to disable :)

#+BEGIN_SRC emacs-lisp :tangle no
  (setq elpy-modules
     (quote
      (elpy-module-company elpy-module-eldoc elpy-module-pyvenv elpy-module-highlight-indentation elpy-module-yasnippet elpy-module-sane-defaults)))
#+END_SRC

This installs PEP8 tools:
#+BEGIN_SRC emacs-lisp
(use-package py-autopep8
  :ensure t
  :config (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
)
#+END_SRC

=iedit= mode allows you to edit all variable instances in a buffer at
once. Useful for renaming.  This trick comes from
https://www.youtube.com/watch?v=mflvdXKyA_g&index=7&list=PLq326Pjb1tngGuj02SGmob7phCkSggOKJ

The default keymap is =M-;=
#+BEGIN_SRC emacs-lisp
(use-package iedit
:ensure t
)
#+END_SRC

** OS configuration
This section should only include OS-specific things.
*** OS X behaviors
According to the [[https://github.com/eschulte/emacs24-starter-kit/blob/master/starter-kit.org][starter kit]], there is a bug on OS X where system-name
is FQDN.

#+BEGIN_SRC emacs-lisp
(if (or
    (eq system-type 'darwin)
    (eq system-type 'berkeley-unix))
    (setq system-name (car (split-string system-name "\\."))))
#+END_SRC

*** OSX Copy and Paste
#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t)
#+END_SRC

*** Set up the right profile information and shell

The shell command setup for OSX is a bit of a mess when you run =M-x
compile=.
  - =opam= wants to have a bunch of environment variables set, which
    are typically defined by =eval `opam config env`=.
  - =elpy= and =python= use virtual environments, and need to make
    sure that they can *prepend* to the path variable the virtualenv
    directory.

If you read the [[https://github.com/ocaml/opam/wiki/Setup-Emacs.app-on-macosx-for-opam-usage][opam faq on OSX]], it will say to do this:

#+BEGIN_SRC emacs-lisp :tangle no
(cond
 ((eq window-system 'ns) ; macosx
  ;; Invoke login shells, so that .profile or .bash_profile is read
  (setq shell-command-switch "-lc")))
(setq explicit-bash-args '("--login" "-i"))
#+END_SRC

This will make sure you bash is run as a login shell, reading through
=.bash_profile=.  This will fix opam, but break elpy virtualenvs.

*** Use the system defined web browser

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-default-macosx-browser)
(use-package osx-browse
 :ensure t
 :config
 (setq browse-default-macosx-browser 'osx-browse-url)
)
#+END_SRC

*** Set up UTF-8
The OS X Terminal.app uses UTF-8 by default.  Taken from [[http://www.emacswiki.org/emacs/EmacsForMacOS][Emacs Wiki]]

#+BEGIN_SRC emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

*** Visible Bell Bug Workaround
Work around [[https://www.reddit.com/r/emacs/comments/3omsr2/weird_display_issue_in_os_x/][OSX bug in El Capitan]] regarding blurred square that kind
of looks like a magnifying glass. It tursn
#+BEGIN_SRC emacs-lisp
(setq visible-bell nil)

#+END_SRC

** Post Initialization
Let's lower our GC thresholds back down to a sane level.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 16777216
      gc-cons-percentage 0.1)
#+END_SRC

** Shortcuts and Other Post Bindings
*** Bind goto-line
Even though line numbers are "evil", I like them. Usually goto-line is
M-g M-g, but here I make it C-c C-g since that is usually not bound
anyway by default and control is easier for me to go to than escape.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c C-g") 'goto-line)
#+END_SRC

#+RESULTS:
: goto-line

*** Turn on flyspell mode
#+BEGIN_SRC emacs-lisp
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
#+END_SRC
