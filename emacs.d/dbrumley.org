#+TITLE: David Brumley's Emacs Configuration
#+OPTIONS: toc:4 h:4

* Configuration
** About this file

This file is inspired by [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs Configuration]] using
literate programming for her Emacs configuration. 

My =~/.emacs.d/init.el= file starts off simply:
#+begin_src emacs-lisp :tangle no
(require 'package)
(org-babel-load-file "~/.emacs.d/dbrumley.org")
#+end_src

The first line is needed to start up the package manager. The second
says to load the rest from my org file. 

** Personal information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "David Brumley"
      user-mail-address "dbrumley@cmu.edu")
#+END_SRC

** Basic configuration and initialization
*** Add some additional repositories

#+BEGIN_SRC emacs-lisp
(setq package-archives
      '(("gnu"         . "http://elpa.gnu.org/packages/")
        ("org"         . "http://orgmode.org/elpa/")
        ("melpa"       . "http://melpa.org/packages/")
        ("marmalade"   . "http://marmalade-repo.org/packages/")))
(package-initialize)
#+END_SRC

Use =M-x package-refresh-contents= to reload the list of packages
after adding this the first time, and subsequent edits. 

*** OS X behaviors
According to the [[https://github.com/eschulte/emacs24-starter-kit/blob/master/starter-kit.org][starter kit]], there is a bug on OS X where system-name
is FQDN.

#+BEGIN_SRC emacs-lisp
(if (or
    (eq system-type 'darwin)
    (eq system-type 'berkeley-unix))
    (setq system-name (car (split-string system-name "\\."))))
#+END_SRC

*** Use the system defined web browser

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-default-macosx-browser)
#+END_SRC

*** Set up UTF-8
The OS X Terminal.app uses UTF-8 by default.  Taken from [[http://www.emacswiki.org/emacs/EmacsForMacOS][Emacs Wiki]]

#+BEGIN_SRC emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

*** Add macports to path
Among other things, this allows emacs to find ispell (aka aspell).
Note that I'm putting =/opt/local/bin= before the normal system
path on purpose. 
#+BEGIN_SRC emacs-lisp
  (setq exec-path (append '("/opt/local/bin") exec-path))
#+END_SRC
*** Turn off splash screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t) 
#+END_SRC
** Preferences
*** Highlight matching parentheses
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

*** Turn off tabs
#+BEGIN_SRC emacs-lisp
  (set-default 'indent-tabs-mode nil)
#+END_SRC

*** Indicate empty lines
#+BEGIN_SRC emacs-lisp
  (set-default 'indicate-empty-lines t)
#+END_SRC

*** Turn on auto-fill for text mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC
    
*** Turn off backup files
#+BEGIN_SRC emacs-lisp
  (set-default 'make-backup-files nil)
#+END_SRC

*** Change "yes or no" to "y or n"
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Turn on flyspell mode for text
#+BEGIN_SRC emacs-lisp
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
#+END_SRC
*** Use SSH by default for TRAMP
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC
*** Turn off toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1) 
#+END_SRC
*** Put time in status bar
#+BEGIN_SRC emacs-lisp
  (setq display-time-day-and-date t display-time-24hr-format t)
               (display-time)
#+END_SRC
** Packages
*** Default packages to install if not already present

This function and setup installs some basic packages.
  * [[http://magit.vc][magit]] for git
  * [[https://github.com/nonsequitur/smex][smex]] which provides feedback on recently and most frequently used
    commands.
  * [[http://www.emacswiki.org/emacs/FillColumnIndicator][fill-column-indicator]] which provides draws a thin line marker down
    the length of the editing window, e.g., to see when to create a
    newline
  * [[http://jblevins.org/projects/markdown-mode/][markdown-mode]] for markdown
  * [[https://github.com/bbatsov/solarized-emacs][solarized-theme]] and [[https://github.com/kuanyui/moe-theme.el][moe-theme]], which are popular themes
  * [[https://github.com/gempesaw/ido-vertical-mode.el][ido-vertical-mode]] for vertical ido completion
  * [[http://www.jonnay.net/bloggity-blog/2014/12/29_making-org-mode-typography-suck-a-little-less.html][org-beautify-theme]] to make org-mode a little more beautiful
  * [[https://github.com/steckerhalter/discover-my-major][discover-my-major]] since you should never stop learning shortcuts
  * org-pandoc to export org using pandoc
  * powerline
  * reverse-theme
  * yaml-mode
  * gh-md: render markdown with the github api

#+BEGIN_SRC emacs-lisp
(defvar mypackages '(magit smex  
                      fill-column-indicator 
                      markdown-mode moe-theme solarized-theme
                      ido-vertical-mode org-beautify-theme
                      discover-my-major
                      org-pandoc powerline
                      reverse-theme yaml-mode elpy
                      company-quickhelp gh-md
                      auctex auctex-latexmk auto-complete
                      latex-preview-pane
                     ))

(package-initialize)
(dolist (p mypackages)
  (when (not (package-installed-p p))
    (package-install p)))
#+END_SRC

*** IDO
*** Autocomplete
#+BEGIN_SRC emacs-lisp
(require 'auto-complete)
#+END_SRC
*** Enable IDO on all the things
#+BEGIN_SRC emacs-lisp
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
#+END_SRC

*** org-mode

Set up the default directory for org files:
#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/Dropbox/org-mode")
#+END_SRC
*** Turn on ido-vertical
#+BEGIN_SRC emacs-lisp
(require 'ido-vertical-mode)
(ido-mode 1)
(ido-vertical-mode 1)
(setq ido-vertical-count t)
#+END_SRC
*** Set up =C-h C-m= for discover-my-major
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-h C-m") 'discover-my-major)
#+END_SRC
** Load fill-column-indicator for visual feedback on EOL
#+BEGIN_SRC emacs-lisp
(require 'fill-column-indicator)
(define-globalized-minor-mode
 global-fci-mode fci-mode (lambda () (fci-mode 1)))
(global-fci-mode t)
#+END_SRC

** YAML

RAML is a markup language based on YAML. There is currently no RAML
mode, but YAML is close enough.

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.raml\\'" . yaml-mode))
(add-to-list 'ac-modes 'yaml-mode)
#+END_SRC

And then load yaml
#+BEGIN_SRC emacs-lisp
(require 'yaml-mode)
#+END_SRC

** OCaml
Everything OCaml related is done out of opam, not the default emacs
package sites. This was taken from the opam =user-setup= package and
Ivan's configuration. 

*** Set up the basic environment. 
#+BEGIN_SRC emacs-lisp
(add-hook 'tuareg-mode-hook 'set-ocaml-error-regexp)
(add-hook 'ocaml-mode-hook 'set-ocaml-error-regexp)

(defun opam-shell-command-to-string (command)
  "Similar to shell-command-to-string, but returns nil unless the process
  returned 0 (shell-command-to-string ignores return value)"
  (let* ((return-value 0)
         (return-string
          (with-output-to-string
            (setq return-value
                  (with-current-buffer standard-output
                    (process-file shell-file-name nil t nil
                                  shell-command-switch command))))))
    (if (= return-value 0) return-string nil)))

(defun opam-update-env ()
  "Update the environment to follow current OPAM switch configuration"
  (interactive)
  (let ((env (opam-shell-command-to-string "opam config env --sexp")))
    (when env
      (dolist (var (car (read-from-string env)))
        (setenv (car var) (cadr var))
        (when (string= (car var) "PATH")
          (setq exec-path (split-string (cadr var) path-separator)))))))

(opam-update-env)

(setq opam-share
  (let ((reply (opam-shell-command-to-string "opam config var share")))
    (when reply (substring reply 0 -1))))
#+END_SRC

*** Make sure we load opam emacs files first.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (concat opam-share "/emacs/site-lisp"))
#+END_SRC

*** opam installed tools automatic detection and initialization
Note we set up merlin to easy mode. 

#+BEGIN_SRC emacs-lisp
  (defun opam-setup-tuareg ()
    (add-to-list 'load-path (concat opam-share "/tuareg") t)
    (load "tuareg-site-file"))

  (defun opam-setup-ocp-indent ()
    (require 'ocp-indent))

  (defun opam-setup-ocp-index ()
    (require 'ocp-index))

  (defun opam-setup-merlin ()
    (require 'merlin)
    (add-hook 'tuareg-mode-hook 'merlin-mode t)
    (add-hook 'caml-mode-hook 'merlin-mode t)
    (set-default 'ocp-index-use-auto-complete nil)
    (set-default 'merlin-use-auto-complete-mode 'easy)
    ;; So you can do it on a mac, where `C-<up>` and `C-<down>` are used
    ;; by spaces.
    (define-key merlin-mode-map
      (kbd "C-c <up>") 'merlin-type-enclosing-go-up)
    (define-key merlin-mode-map
      (kbd "C-c <down>") 'merlin-type-enclosing-go-down)
    (set-face-background 'merlin-type-face "skyblue"))

  (defun opam-setup-utop ()
    (autoload 'utop "utop" "Toplevel for OCaml" t)
    (autoload 'utop-setup-ocaml-buffer "utop" "Toplevel for OCaml" t)
    (add-hook 'tuareg-mode-hook 'utop-setup-ocaml-buffer))

  (setq opam-tools
    '(("tuareg" . opam-setup-tuareg)
      ("ocp-indent" . opam-setup-ocp-indent)
      ("ocp-index" . opam-setup-ocp-index)
      ("merlin" . opam-setup-merlin)
      ("utop" . opam-setup-utop)))

  (defun opam-detect-installed-tools ()
    (let*
        ((command "opam list --installed --short --safe --color=never")
         (names (mapcar 'car opam-tools))
         (command-string (mapconcat 'identity (cons command names) " "))
         (reply (opam-shell-command-to-string command-string)))
      (when reply (split-string reply))))

  (setq opam-tools-installed (opam-detect-installed-tools))

  (defun opam-auto-tools-setup ()
    (interactive)
    (dolist
        (f (mapcar (lambda (x) (cdr (assoc x opam-tools))) opam-tools-installed))
      (funcall (symbol-function f))))

  (opam-auto-tools-setup)
#+END_SRC

*** =C-c c= for recompile

#+BEGIN_SRC emacs-lisp
(add-hook 'tuareg-mode-hook
          (lambda () 
            (merlin-mode)
            (local-set-key (kbd "C-c c") 'recompile)
            (local-set-key (kbd "C-c C-c") 'recompile)
            (auto-fill-mode)))
#+END_SRC
*** Set up atdgen 
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.atd\\'" . tuareg-mode))
#+END_SRC
** Python

I am a basic elpy user. Note that often I will want to edit a file
that doesn't conform to pep8.  To disable all those annoying warnings,
just turn off =flymake-mode=. For now I leave it on by default.


First, enable elpy
#+BEGIN_SRC emacs-lisp
;(require 'elpy)
(elpy-enable)
#+END_SRC

Then, enable quickhints, which provide pydoc documentation on
autocomplete.
#+BEGIN_SRC emacs-lisp
(company-quickhelp-mode)
#+END_SRC

Disable flycheck because a lot of code I look at doesn't conform to
pep8 or pass flake8. I wish the code I looked at was better and I
didn't have to disable :)

#+BEGIN_SRC emacs-lisp
(setq elpy-modules
    (quote
     (elpy-module-company elpy-module-eldoc elpy-module-pyvenv elpy-module-highlight-indentation elpy-module-yasnippet elpy-module-sane-defaults)))

#+END_SRC

# fix two key binding bugs in elpy. This is taken from [[https://www.youtube.com/watch?v%3D0kuCeS-mfyc][this tutorial
# video]]. 
# #+BEGIN_SRC emacs-lisp
# (define-key yas-minor-mode-map (kbd "C-c k") 'yas-expand)
# (define-key global-map (kbd "C-c o") 'iedit-mode)
# #+END_SRC

** Latex/Docview setup
*** Setup auctex basics
#+BEGIN_SRC emacs-lisp

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;; LATEXMK and AUCTEX ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; http://tex.stackexchange.com/a/156617/26911

  ;; Sample `latexmkrc` for OSX that copies the *.pdf file from the `/tmp` directory
  ;; to the working directory:
  ;;    $pdflatex = 'pdflatex -file-line-error -synctex=1 %O %S && (cp "%D" "%R.pdf")';
  ;;    $pdf_mode = 1;
  ;;    $out_dir = '/tmp';"

  ;; Skim's displayline is used for forward search (from .tex to .pdf)
  ;; option -b highlights the current line
  ;; option -g opens Skim in the background
  ;; option -o open Skim in the foreground with full application focus.

  ;; Skim -- turn on auto-refresh by typing the following into the terminal:
  ;; defaults write -app Skim SKAutoReloadFileUpdate -boolean true

  ;; TexLive on OSX:
  ;; (setenv "PATH" (concat (getenv "PATH") ":/usr/texbin"))

  (eval-after-load "tex" '(progn

    (add-to-list 'TeX-expand-list '("%(tex-file-name)" (lambda ()
      (concat "\"" (buffer-file-name) "\""))))

    (add-to-list 'TeX-expand-list '("%(pdf-file-name)" (lambda ()
      (concat
        "\"" (car (split-string (buffer-file-name) "\\.tex"))
        ".pdf" "\""))))

    (add-to-list 'TeX-expand-list '("%(line-number)" (lambda ()
      (format "%d" (line-number-at-pos)))))

        (add-to-list 'TeX-expand-list '("%(latexmkrc-osx)" (lambda () "/Users/dbrumley/.latexmkrc")))

        (add-to-list 'TeX-command-list '("latexmk-osx" "latexmk -r %(latexmkrc-osx) %s" TeX-run-TeX nil t))

        (add-to-list 'TeX-expand-list '("%(skim)" (lambda () "/Applications/Skim.app/Contents/SharedSupport/displayline")))

        (add-to-list 'TeX-command-list '("Skim" "%(skim) -o %(line-number) %(pdf-file-name) %(tex-file-name)" TeX-run-TeX nil t))

        (add-to-list 'TeX-view-program-list '("skim-viewer" "%(skim) -o %(line-number) %(pdf-file-name) %(tex-file-name)"))

        (add-to-list 'TeX-command-list 
                     '("doc-view" "(lambda ()
                 (let ((f \"%o\"))
                   (find-file-other-window f)
                   (doc-view-mode)))"
                       TeX-run-function nil t))


        (setq TeX-view-program-selection '((output-pdf "skim-viewer")))
        ))


  (defun auctex-latexmk ()
  "Compile, view *.pdf, and clean (maybe)."
  (interactive)
    (require 'tex)
    (require 'latex)
    (let* (
        (TeX-PDF-mode t)
        (TeX-source-correlate-mode t)
        (TeX-source-correlate-method 'synctex) 
        (TeX-source-correlate-start-server nil)
        (TeX-clean-confirm t))
      (when (buffer-modified-p)
        (save-buffer))
      (set-process-sentinel
        (TeX-command "LaTeX" 'TeX-master-file)
          (lambda (p e)
            (when (not (= 0 (process-exit-status p)))
              (TeX-next-error t) )
            (when (= 0 (process-exit-status p))
              (delete-other-windows)
              (TeX-command "View" 'TeX-active-master 0)
              ;; `set-process-sentinel` cannot be used on Windows XP for post-view cleanup,
              ;; because Emacs treats SumatraPDF as an active process until SumatraPDF exits.
              (let ((major-mode 'latex-mode))
                (TeX-command "Clean" 'TeX-master-file)))))))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

*** Use latexmk for compilation via C-c C-c.  


*** handy in-emacs pdf navigation
In docview mode, creates key bindings so that =M-[= and =M-]= move forward
and backward while keeping your cursor within the buffer. useful for
reviewing papers so you can write notes as you read.  Taken from
[[http://www.idryman.org/blog/2013/05/20/emacs-and-pdf/]]

#+BEGIN_SRC emacs-lisp
(fset 'doc-prev "\C-xo\C-x[\C-xo")
(fset 'doc-next "\C-xo\C-x]\C-xo")
(global-set-key (kbd "M-[") 'doc-prev)
(global-set-key (kbd "M-]") 'doc-next)
#+END_SRC
*** Set up resolution for doc-view
The goal was for retina display to work inside emacs. Unfortunately it
doesn't seem to work below. I guess I'll use an external display :(
#+BEGIN_SRC emacs-lisp
;(setq doc-view-resolution 300)
#+END_SRC


** Org-mode
*** Load up org mode
#+BEGIN_SRC emacs-lisp
(require 'org)
#+END_SRC
*** Submodules
Org has a bunch of possible modules.  These are some ones that look
interesting.
#+BEGIN_SRC emacs-lisp
(setq org-modules '(org-drill
                     org-habit
                     org-jekyll
                    ))
(eval-after-load 'org
 '(org-load-modules-maybe t))
(setq org-expiry-inactive-timestamps t)
#+END_SRC
*** Languages
Set up the languages that we want to have available, e.g., so fontify
works.
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babl-load-languages
   '((python . t)
     (emacs-lisp . t)
     (ocaml . t)
     (python . t)
     (shell . t)
    )
) 
(require 'tuareg)
(require 'ocp-indent)
#+END_SRC
*** fontify buffers
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
*** Set up =C-c c=, notes file, and org-directory
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org-mode")
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC
*** Journal capture
This template captures to a journal, e.g., for logging time.
This was taken from
[[http://sachachua.com/blog/2014/11/using-org-mode-keep-process-journal/]]

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(;; other entries
        ("j" "Log entry" entry
         (file+datetree+prompt "~/Dropbox/org-mode/journal.org")
         "* %?\n Entered on %U\n %i\n %a")
        ;; other entries
        ))
#+END_SRC

Going through this:
  - first we say this is a journal entry, and it's bound to =C-c c j=.
  - The =file+datetree+prompt= keyword means that the entires will be
    stored in =~/Dropbox/org-mode/journal.org=
  - =%K= means link to the currently clocked task. 
  - =%a= means annotation.
  - =%i= means initial content, the region when capture is called
    while the region is active. The entire text will be indented like
    =%i= itself.
  - =%?= after completing the template, position cursor here.

** Set up theme
My theme *still* doesn't load up right, even when this is last. Why?
For now, I run emacs as =open -a Emacs.app --args -r= to run in
reverse mode instead of using the theme. 

#+BEGIN_SRC emacs-lisp
(require 'powerline)
(powerline-default-theme)
;(load-theme 'reverse t)
#+END_SRC

* Some Reminders
** Evaluate lisp statements
In emacs, you can evaluate a LISP command with =C-x C-e=. 
** See the value of a variable
You can use =M-x describe-variable= to see the value of a variable,
e.g., =exec-path= is the equivalent of =PATH= in emacs.

** Insert a code block in org mode
Type =<s= followed by the TAB key. You can then do =C-c '= (that is a
single quote) within the code block to bring up a separate
window. After editing, type =C-c '= again to return to the main
buffer. 
** Use discover-my-major
Discover my major will show you key bindings in the current major
mode. By default the key binding is =C-h C-m=
