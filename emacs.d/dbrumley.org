#+TITLE: David Brumley's Emacs Configuration
#+OPTIONS: toc:4 h:4

* Configuration
** About this file
This file is inspired by [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs Configuration]] using
literate programming for her Emacs configuration. 

My =~/.emacs.d/init.el= file starts off simply:
#+begin_src emacs-lisp :tangle no
(require 'package)
(add-to-list 'load-path "~/.emacs.d/elisp/org-mode/lisp")
(add-to-list 'load-path "~/.emacs.d/elisp/org-mode/contrib/lisp" t)
(org-babel-load-file "~/.emacs.d/dbrumley.org")
#+end_src

The first line is needed to start up the package manager. 

The second and third make sure I use the git-installed orgmode.  I use
the git version.  (I've not figured out how to use the
org-plus-contrib from melpa so that I could a) use use-package, b) use
the contrib packages.  I worked hours on this; I don't know
why it wasn't working.)


The fourth says to load the rest from my org file. Note that the
=:tangle no= says that the above line is *not* exported as source as
this is just an example. Future lines will not have that directive.

** Personal information
Set up my name and email address.  

#+BEGIN_SRC emacs-lisp
(setq user-full-name "David Brumley"
      user-mail-address "dbrumley@cmu.edu")
#+END_SRC

** Basic OS configuration 
This section should only include OS-specific things.
*** OS X behaviors
According to the [[https://github.com/eschulte/emacs24-starter-kit/blob/master/starter-kit.org][starter kit]], there is a bug on OS X where system-name
is FQDN.

#+BEGIN_SRC emacs-lisp
(if (or
    (eq system-type 'darwin)
    (eq system-type 'berkeley-unix))
    (setq system-name (car (split-string system-name "\\."))))
#+END_SRC

*** Use the system defined web browser

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-default-macosx-browser)
#+END_SRC

*** Set up UTF-8
The OS X Terminal.app uses UTF-8 by default.  Taken from [[http://www.emacswiki.org/emacs/EmacsForMacOS][Emacs Wiki]]

#+BEGIN_SRC emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

*** Add macports to path
Among other things, this allows emacs to find ispell (aka aspell).
Note that I'm putting =/opt/local/bin= before the normal system
path on purpose. 

#+BEGIN_SRC emacs-lisp
  (setq exec-path (append '("/opt/local/bin") exec-path))
#+END_SRC

** Initial Preferences
*** bind =dbrumley.org= =d= register
I bind a register key to =dbrumley.org= because I find myself editing
it often.  I put this at the top because I want it available even if
something else doesn't load.

Reminder: to access this press =C-x r j= and press =d= at the
prompt. I initially found this hard to remember until I figured out:
  * =C-x= means execute in emacs
  * =r= is register
  * =j= is jump
So overall I think of this as "execute the command register jump",
which is very logical if you think about it. 

#+BEGIN_SRC emacs-lisp
  (set-register ?d (cons 'file "~/.emacs.d/dbrumley.org"))
#+END_SRC
*** Turn off splash screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t) 
#+END_SRC

*** Highlight matching parentheses
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

*** Turn off tabs
#+BEGIN_SRC emacs-lisp
  (set-default 'indent-tabs-mode nil)
#+END_SRC

*** Indicate empty lines
#+BEGIN_SRC emacs-lisp
  (set-default 'indicate-empty-lines t)
#+END_SRC

*** Turn on auto-fill for text mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC
    
*** Turn off backup files
#+BEGIN_SRC emacs-lisp
  (set-default 'make-backup-files nil)
#+END_SRC

*** Change "yes or no" to "y or n"
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Use SSH by default for TRAMP
#+BEGIN_SRC emacs-lisp
(setq tramp-default-method "ssh")
#+END_SRC
*** Turn off toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1) 
#+END_SRC
*** Put time in status bar
#+BEGIN_SRC emacs-lisp
  (setq display-time-day-and-date t display-time-24hr-format t)
               (display-time)
#+END_SRC
** Basic Packages
I put here more fundamental packages, with more programming-specific
or involved configurations at the top level.

*** Add some additional repositories
I currently do not have marmalade, as melpa and org mode
typically are good enough for me. 
#+BEGIN_SRC emacs-lisp
(setq package-archives
      '(("gnu"         . "http://elpa.gnu.org/packages/")
        ("org"         . "http://orgmode.org/elpa/")
        ("melpa"       . "http://melpa.org/packages/")))

(require 'package)
;;(setq package-enable-at-startup nil)
(package-initialize)
#+END_SRC

Use =M-x package-refresh-contents= to reload the list of packages
after adding this the first time, and subsequent edits. 

*** =use-package= goodness
I saw [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]]'s configuration used this thing called [[https://github.com/jwiegley/use-package][use-package]],
and am trying it out for managing my list of packages to install
automatically.

Others also seem to love it, including [[http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html][Sebastian Wiesner]]'s blog.

I've already added melpa to my package list.  Here I am going to
bootstrap directly with emacs built-in package manager first.

#+BEGIN_SRC emacs-lisp
(require 'package)


(package-initialize)

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

According to the [[https://github.com/jwiegley/use-package][use-package github page]], the following will reduce
startup time.
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package))
(require 'diminish)                ;; if you use :diminish
(require 'bind-key)                ;; if you use any :bind variant
#+END_SRC

*** Set up visuals, including theme and fill column
I expected this section to be bigger, but I don't really use themes
much anymore. I use either the default theme, or run emacs in reverse
mode (recommended by ivg!).

I do set up a fill-column-indicator to set up a visual bar on the
right of my screen showing the 80 column maximum. I like to remind
(annoy?) my graduate students that 80 columns is the maximum. They, of
course, don't like this an insist screens are bigger than this, and
proceed to show me on their screen how big it is. 

I insist on 80 columns for a few reasons:
  1. 80 columns is really the maximum size you can print with a nice
     monospace font.
  2. I find it easier since I like split screens, and with 80 columns
     I can put two windows side-by-side. 
  3. It's standard in every editor. Why make the whole world
     reconfigure to their personal preference?

This will set it up as a global minor mode. 
#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :ensure t
  :config
  (progn
     (define-globalized-minor-mode
         global-fci-mode fci-mode (lambda () (fci-mode 1)))
     (global-fci-mode t)
  )
)
#+END_SRC


I also currently use powerline, though I'm not sure really how useful
it is.
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t
)
#+END_SRC

*** Set up magit
I've started using magit as part of my emacs-is-my-os effort.  

One question is whether to set magit-auto-revert-mode or not. The
default is to set it, but there is an option to do:
#+BEGIN_SRC emacs-lisp :tangle no
  (setq magit-auto-revert-mode nil)
#+END_SRC

The warning message is quite scary, and says that if enabled (which is
the default), you may have data loss. The [[https://github.com/magit/magit/issues/1783][author maintains]] that
updating every time you do a git pull might be annoying. I'm going
with his advice here; hope I'm not shooting myself in the foot.

The below binds =C-x v d= to =magit-status=.  

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :init
  ;; disable scary warning
  (setq magit-last-seen-setup-instructions "1.4.0")
  :bind (("C-x v d" . magit-status))
)
#+END_SRC

*** Set up ido, and run it on all the things
Currently I'm using ido mode.  I should try out helm (suppose to be
better), but currently that is just a todo for me.

#+BEGIN_SRC emacs-lisp
(use-package ido
  :ensure t
  :init
  (progn
    (ido-mode t)
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
  )
)
#+END_SRC

I also like to have the list of completions listed vertically, not
horizontally. 
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
  :ensure t
)
#+END_SRC
*** Set up company mode
I use [[http://company-mode.github.io/][company mode]] for auto-completion.  Funny story: I thought
company mode was some sort of corporate mode. It actually stands for
"complete anything".  Note this is use by elpy for python, but I have
it here since it works with most languages.  I also enable it globally
via the config hook. 

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config 
   (add-hook 'after-init-hook 'global-company-mode)
)
(use-package company-quickhelp
  :ensure t
)
#+END_SRC

*** Discover my major
*** smex, smartparen, and discover-my-major

#+BEGIN_SRC emacs-lisp
(use-package smex
  :ensure t
  :bind ("M-x" . smex)
)
#+END_SRC

#+BEGIN_SRC emacs-lisp 
  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :config  
    (progn
       (require 'smartparens-config)
       (smartparens-global-mode 1)
    )
  )
#+END_SRC

In any mode =C-h C-m= will show a list of key bindings.
#+BEGIN_SRC emacs-lisp
(use-package discover-my-major
  :ensure t
)
(global-set-key (kbd "C-h C-m") 'discover-my-major)
#+END_SRC

** Org mode

I use org-mode checked out from git. I don't use melpa because I want
to play around with org-contrib, and I could never get
org-plus-contrib to work and load properly.

The following loads org, and sets up the modules I plan to play around
with. Note I've only gotten this to work with a fresh checkout of
orgmode as:
#+BEGIN_SRC shell :tangle no
$ git clone git://orgmode.org/org-mode.git
$ <edit org-mode/local.mk> 
$ make autoloads
#+END_SRC

The edit to =org-mode/local.mk= is to make sure the correct emacs is
chosen (by default it uses the default OSX one instead of the one I
installed).


Then I've added to my =init.el= the following to make sure the new
orgmode is used instead of the built-in:
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'load-path "~/path/to/orgdir/lisp")
(add-to-list 'load-path "~/path/to/orgdir/contrib/lisp" t)
#+END_SRC

Finally, we start real configure. First, I load in some contrib's I'm
playing with.

#+BEGIN_SRC emacs-lisp
(setq org-modules
              '(org-bbdb 
                org-bibtex 
                org-docview 
                org-gnus 
                org-info 
                org-irc 
                org-mhe 
                org-rmail 
                org-w3m
                org-drill))
(eval-after-load 'org
 '(org-load-modules-maybe t))
#+END_SRC

And fontify the buffers and set the default org directory:
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Set up our default directory and default org capture.

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org-mode")
#+END_SRC


Make sure org knows about all the languages we use
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babl-load-languages
   '((python . t)
     (emacs-lisp . t)
     (ocaml . t)
     (python . t)
     (shell . t)
    )
) 
#+END_SRC

**** Org Journal and capture

Set up default notes directory for random things.
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC


This template captures to a journal, e.g., for logging time.
This was taken from
[[http://sachachua.com/blog/2014/11/using-org-mode-keep-process-journal/]]

#+BEGIN_SRC emacs-lisp :tangle no
(setq org-capture-templates
      '(;; other entries
        ("j" "Log entry" entry
         (file+datetree+prompt "~/Dropbox/org-mode/journal.org")
         "* %?\n Entered on %U\n %i\n %a")
        ;; other entries
        ))
#+END_SRC

Going through this:
  - first we say this is a journal entry, and it's bound to =C-c c j=.
  - The =file+datetree+prompt= keyword means that the entires will be
    stored in =~/Dropbox/org-mode/journal.org=
  - =%K= means link to the currently clocked task. 
  - =%a= means annotation.
  - =%i= means initial content, the region when capture is called
    while the region is active. The entire text will be indented like
    =%i= itself.
  - =%?= after completing the template, position cursor here.


*** Org references

Here are some useful references for org mode setup:
  1) [[http://orgmode.org/worg/org-hacks.html][org mode hacks]].  A list of code snippets for org mode.
  2) [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha's org mode]].  
I don't use most of these, but keep the above references because they
may be useful sometime.

** Python
I am a basic elpy user, and so far am quite happy with it. I use it
with company-mode for providing quickhints, which provide pydoc
documentation on autocomplete. 

#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :config 
    (elpy-enable)
    (company-quickhelp-mode)
)
#+END_SRC

Note that often I will want to edit a file that doesn't conform to
pep8.  To disable flycheck (which calls pep8 and flake8) you should
uncomment the following lines.  I wish the code I looked at was better
and I didn't have to disable :)

#+BEGIN_SRC emacs-lisp
;(setq elpy-modules
;    (quote
;     (elpy-module-company elpy-module-eldoc elpy-module-pyvenv elpy-module-highlight-indentation elpy-module-yasnippet elpy-module-sane-defaults)))
#+END_SRC

** OCaml
Everything OCaml related is done out of opam, not the default emacs
package sites. This was taken from the opam =user-setup= package and
Ivan's configuration. 

Note that to use a dynamically generated load path, we must inform the
byte-compiler of the definition so that the value is available. See
the [[https://github.com/jwiegley/use-package][use-package]] documentation.

First, we define some utility functions that give us easy access to
locations under our opam install directory.
#+BEGIN_SRC emacs-lisp
  (defun opam-share-path (path) 
    (let ((opam-share-dir
           (shell-command-to-string "echo -n `opam config var share`"))
    ) (concat opam-share-dir "/" path))
  )
  
  (defun opam-lib-path (path) 
    (let ((opam-share-dir
           (shell-command-to-string "echo -n `opam config var lib`")))
      (concat opam-share-dir "/" path)
    )
  )
  (defun opam-bin-path (path) 
    (let ((opam-share-dir
           (shell-command-to-string "echo -n `opam config var bin`")))
      (concat opam-share-dir "/" path)))

#+END_SRC

First, load up ocp-indent, as we should never be manually indenting.
#+BEGIN_SRC emacs-lisp
  (use-package ocp-indent
    :load-path (lambda () (list (opam-share-path "emacs/site-lisp")))
  )
#+END_SRC

Second, load up merlin.  We set some preferences:
  * =tuareg-font-lock-symbols= gives us the fancy typeface where
    functions have the lambda character, etc.
  * =merlin-use-auto-complete-mode= makes auto-complete easy.
  * =merlin-locate-preference= is set to prefer the mli file over the
    ml file. 
  * We enable using company as a backend for autocomplete. This should
    have already been enabled globally, but why not have it here too
    just to make sure.

Note that on some systems =tuareg-font-lock-symbols= causes huge
performance issues; if this happens just comment it out.

#+BEGIN_SRC emacs-lisp
  (use-package merlin
    :load-path (lambda () (list (opam-share-path "emacs/site-lisp")))
    :config 
      (progn
        (load "tuareg-site-file")
        (setq tuareg-font-lock-symbols t)
        (setq merlin-use-auto-complete-mode 'easy)
        (setq merlin-locate-preference 'mli)
        ; Make company aware of merlin
        (add-to-list 'company-backends 'merlin-company-backend)
        ; Enable company on merlin managed buffers
        (add-hook 'merlin-mode-hook 'company-mode)
        ; use tuareg for atdgen files
        (add-to-list 'auto-mode-alist '("\\.atd\\'" . tuareg-mode))
       )   
  )
#+END_SRC

*** Set up ott
I install ott from =opam=, so I don't include it in the package
manager.  Note that ott's emacs config needs a specialized path (which
seems normal for opam for some reason). 

#+BEGIN_SRC emacs-lisp 
(use-package ottmode 
  :load-path (lambda () (list (opam-share-path "/ott/emacs")))
)
#+END_SRC

*** =bap.mli= register key is =b=
I like to be able to quickly reference =bap.mli= from anywhere. I bind
looking at this file currently to the =b= register.  Reminder: to
access this press =C-x r j= and press =b= at the prompt.

#+BEGIN_SRC emacs-lisp 
(set-register ?b (cons 'file
                         (opam-lib-path "/bap/bap.mli")))
#+END_SRC

** YAML and Markdown
*** Markdown
I use two markdown modules current: markdown-mode for editing, and the
github markdown API for rendering via gh-md

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
)
(use-package gh-md
  :ensure t
)
#+END_SRC

*** YAML and RAML
RAML is a markup language based on YAML. There is currently no RAML
mode, but YAML is close enough.

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t
  :config 
    (add-to-list 'auto-mode-alist '("\\.raml\\'" . yaml-mode))
)
#+END_SRC
** Latex/Docview setup
*** Install packages
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :ensure t
  )
  ;; (use-package auctex-latexmk
  ;;   :ensure auxtex
  ;; )
  ;; (use-package latex-preview-pane
  ;;   :ensure auxtex
  ;; )
#+END_SRC

*** Setup auctex basics
#+BEGIN_SRC emacs-lisp

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;; LATEXMK and AUCTEX ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; http://tex.stackexchange.com/a/156617/26911

  ;; Sample `latexmkrc` for OSX that copies the *.pdf file from the `/tmp` directory
  ;; to the working directory:
  ;;    $pdflatex = 'pdflatex -file-line-error -synctex=1 %O %S && (cp "%D" "%R.pdf")';
  ;;    $pdf_mode = 1;
  ;;    $out_dir = '/tmp';"

  ;; Skim's displayline is used for forward search (from .tex to .pdf)
  ;; option -b highlights the current line
  ;; option -g opens Skim in the background
  ;; option -o open Skim in the foreground with full application focus.

  ;; Skim -- turn on auto-refresh by typing the following into the terminal:
  ;; defaults write -app Skim SKAutoReloadFileUpdate -boolean true

  ;; TexLive on OSX:
  ;; (setenv "PATH" (concat (getenv "PATH") ":/usr/texbin"))

  (eval-after-load "tex" '(progn

    (add-to-list 'TeX-expand-list '("%(tex-file-name)" (lambda ()
      (concat "\"" (buffer-file-name) "\""))))

    (add-to-list 'TeX-expand-list '("%(pdf-file-name)" (lambda ()
      (concat
        "\"" (car (split-string (buffer-file-name) "\\.tex"))
        ".pdf" "\""))))

    (add-to-list 'TeX-expand-list '("%(line-number)" (lambda ()
      (format "%d" (line-number-at-pos)))))

        (add-to-list 'TeX-expand-list '("%(latexmkrc-osx)" (lambda () "/Users/dbrumley/.latexmkrc")))

        (add-to-list 'TeX-command-list '("latexmk-osx" "latexmk -r %(latexmkrc-osx) %s" TeX-run-TeX nil t))

        (add-to-list 'TeX-expand-list '("%(skim)" (lambda () "/Applications/Skim.app/Contents/SharedSupport/displayline")))

        (add-to-list 'TeX-command-list '("Skim" "%(skim) -o %(line-number) %(pdf-file-name) %(tex-file-name)" TeX-run-TeX nil t))

        (add-to-list 'TeX-view-program-list '("skim-viewer" "%(skim) -o %(line-number) %(pdf-file-name) %(tex-file-name)"))

        (add-to-list 'TeX-command-list 
                     '("doc-view" "(lambda ()
                 (let ((f \"%o\"))
                   (find-file-other-window f)
                   (doc-view-mode)))"
                       TeX-run-function nil t))


        (setq TeX-view-program-selection '((output-pdf "skim-viewer")))
        ))


  (defun auctex-latexmk ()
  "Compile, view *.pdf, and clean (maybe)."
  (interactive)
    (require 'tex)
    (require 'latex)
    (let* (
        (TeX-PDF-mode t)
        (TeX-source-correlate-mode t)
        (TeX-source-correlate-method 'synctex) 
        (TeX-source-correlate-start-server nil)
        (TeX-clean-confirm t))
      (when (buffer-modified-p)
        (save-buffer))
      (set-process-sentinel
        (TeX-command "LaTeX" 'TeX-master-file)
          (lambda (p e)
            (when (not (= 0 (process-exit-status p)))
              (TeX-next-error t) )
            (when (= 0 (process-exit-status p))
              (delete-other-windows)
              (TeX-command "doc-view" 'TeX-active-master 0)
              ;; `set-process-sentinel` cannot be used on Windows XP for post-view cleanup,
              ;; because Emacs treats SumatraPDF as an active process until SumatraPDF exits.
              (let ((major-mode 'latex-mode))
                (TeX-command "Clean" 'TeX-master-file)))))))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

*** Turn on reftex and set default bibliography

#+BEGIN_SRC emacs-lisp
(add-hook 'latex-mode-hook 'turn-on-reftex)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-default-bibliography '("DBrumley.bib"))
#+END_SRC

*** handy in-emacs pdf navigation
In docview mode, creates key bindings so that =M-[= and =M-]= move forward
and backward while keeping your cursor within the buffer. useful for
reviewing papers so you can write notes as you read.  Taken from
[[http://www.idryman.org/blog/2013/05/20/emacs-and-pdf/]]

#+BEGIN_SRC emacs-lisp
(fset 'doc-prev "\C-xo\C-x[\C-xo")
(fset 'doc-next "\C-xo\C-x]\C-xo")
(global-set-key (kbd "M-[") 'doc-prev)
(global-set-key (kbd "M-]") 'doc-next)
#+END_SRC

** Old Stuff
*** OCaml Old Stuff
Some old stuff I don't use but wanted to keep around for reference.

#+BEGIN_SRC emacs-lisp :tangle no

  ;; (add-to-list 'load-path (opam-path "emacs/site-lisp"))
  ;; (add-to-list 'load-path (opam-path "tuareg"))

  ;; (load "tuareg-site-file")
  ;; (require 'ocp-indent)
  ;; (require 'merlin)

  ;; ;; uncomment the following for fancy greek letters
  ;; ; (setq tuareg-font-lock-symbols t)
  ;; (setq merlin-use-auto-complete-mode 'easy)
  ;; (setq merlin-locate-preference 'mli)

  ;; (add-hook 'tuareg-mode-hook
  ;;           (lambda () 
  ;;             (merlin-mode)
  ;;             (local-set-key (kbd "C-c c") 'recompile)
  ;;             (local-set-key (kbd "C-c C-c") 'recompile)
  ;;             ; workaround for https://github.com/ocaml/tuareg/issues/45
  ;;             (tuareg-make-indentation-regexps)
  ;;             (auto-fill-mode)))

  ;; (defun opam-env ()
  ;;   (interactive nil)
  ;;   (dolist (var
  ;;            (car (read-from-string
  ;;                  (shell-command-to-string "opam config env --sexp"))))
  ;;     (setenv (car var) (cadr var))))

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'tuareg-mode-hook
          (lambda () 
            (merlin-mode)
            (local-set-key (kbd "C-c c") 'recompile)
            (local-set-key (kbd "C-c C-c") 'recompile)
            (auto-fill-mode)))
#+END_SRC

*** Default packages to install if not already present

This function and setup installs some basic packages.
  * [[http://magit.vc][magit]] for git
  * [[https://github.com/nonsequitur/smex][smex]] which provides feedback on recently and most frequently used
    commands.
  * [[http://www.emacswiki.org/emacs/FillColumnIndicator][fill-column-indicator]] which provides draws a thin line marker down
    the length of the editing window, e.g., to see when to create a
    newline
  * [[http://jblevins.org/projects/markdown-mode/][markdown-mode]] for markdown
  * [[https://github.com/bbatsov/solarized-emacs][solarized-theme]] and [[https://github.com/kuanyui/moe-theme.el][moe-theme]], which are popular themes
  * [[https://github.com/gempesaw/ido-vertical-mode.el][ido-vertical-mode]] for vertical ido completion
  * [[http://www.jonnay.net/bloggity-blog/2014/12/29_making-org-mode-typography-suck-a-little-less.html][org-beautify-theme]] to make org-mode a little more beautiful
  * [[https://github.com/steckerhalter/discover-my-major][discover-my-major]] since you should never stop learning shortcuts
  * org-pandoc to export org using pandoc
  * powerline
  * reverse-theme
  * yaml-mode
  * gh-md: render markdown with the github api

#+BEGIN_SRC emacs-lisp :tangle no
(defvar mypackages '(smex  
                      discover-my-major
                      reverse-theme yaml-mode
                     ))

(package-initialize)
(dolist (p mypackages)
  (when (not (package-installed-p p))
    (package-install p)))
#+END_SRC

*** Autocomplete
#+BEGIN_SRC emacs-lisp :tangle no
(require 'auto-complete)
#+END_SRC

*** Turn on ido-vertical
#+BEGIN_SRC emacs-lisp :tangle no
(require 'ido-vertical-mode)
(ido-mode 1)
(ido-vertical-mode 1)
(setq ido-vertical-count t)
#+END_SRC
*** smartparen all the things
#+BEGIN_SRC emacs-lisp :tangle no
(require 'smartparens-config)
#+END_SRC


** Shortcuts and Registers


*** Registers
I use registers to open up specific files (I'm saving shortcuts for
keyboard macros).  While surely an old idea, I'm trying to template
after [[http://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/][Sacha Chua]]'s emacs here.

*** Bind goto-line
Even though line numbers are "evil", I like them. Usually goto-line is
M-g M-g, but here I make it C-c C-g since that is usually not bound
anyway by default and control is easier for me to go to than escape.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c C-g") 'goto-line)
#+END_SRC

#+RESULTS:
: goto-line

*** Set up =C-h C-m= for discover-my-major
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-h C-m") 'discover-my-major)
#+END_SRC

** TODO Turn on flyspell mode for text
#+BEGIN_SRC emacs-lisp
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
#+END_SRC

* TODO
** TODO Try out helm 
** DONE Investigate load errors in dbrumley.org
These two warnings:
Could not load company-mode
Could not load org-pandoc

** TODO Investigate smartparens for ocaml editing
See https://github.com/Fuco1/smartparens/wiki/Quick-tour

* Some Reminders
** Evaluate lisp statements
In emacs, you can evaluate a LISP command with =C-x C-e=. 
** See the value of a variable
You can use =M-x describe-variable= to see the value of a variable,
e.g., =exec-path= is the equivalent of =PATH= in emacs.

** Insert a code block in org mode
Type =<s= followed by the TAB key. You can then do =C-c '= (that is a
single quote) within the code block to bring up a separate
window. After editing, type =C-c '= again to return to the main
buffer. 
** Use discover-my-major
Discover my major will show you key bindings in the current major
mode. By default the key binding is =C-h C-m=
